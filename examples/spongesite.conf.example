##################################
# Sample Sponge Site Configuration
##################################

#
# Project Setup 
# Every project is assumed to have a single SCM source.  Note: this doesn't hold true for more complex projects relying on
# external projects, or projects hosting one or more nested projects (such as Android).\
# Hello Cabbages...a few things to watch out for when configuring
# * Don't end a line with =, I am splitting lines along =, which presumably gets messed up if u do this
#
#
project.fullname=Project Sponge 
project.scm.uri=git://github.com/truedat101/sponge.git 
project.work.dir=/tmp
project.db.dir=/tmp
project.host.binarypath=/sw/bin

# sponge.project.scm.browser=github
# sponge.project.community.name=sponge
# sponge.project.community.url=http://github.com/truedat101/sponge/tree/master
# project.founded gives the project an origin in history
project.founded=2009,03,17 

#
# Data Source Setup
# 

#
# Plugin -> Github
#
datasource.github.pluginclassname=sponge.plugins.simplegithub.GithubDatasource
datasource.github.username=truedat101
datasource.github.reponame=sponge
datasource.github.home=http://github.com/truedat101/sponge
datasource.github.scm.uri=git://github.com/truedat101/sponge.git
datasource.github.api.uri=/api/v2/yaml
datasource.github.apikey=FOO2

#
# Plugin -> Freshmeat.net
#
datasource.freshmeat.pluginclassname=sponge.plugins.simplefreshmeat.FreshmeatDotNetDatasource
datasource.freshmeat.api.root.uri=http://freshmeat.net
# XXX You need to put your own API Key
datasource.freshmeat.apikey=FOO
# XXX Put your project name here, use opencds for now :)
datasource.freshmeat.permalink=opencds 

#
# Plugin -> SEOMindshare
# 
datasource.seomindshare.pluginclassname=sponge.plugins.simpleseomindshare.SEOMindshareDatasource
# XXX use xmpp.org for the default domain test case, you should put your project site domain here
datasource.seomindshare.query.1=url http://xmpp.com
# XXX use xmpp for the default search term query, 
# Should probably have a query for each portal, we currently only support one query, easy to change later
datasource.seomindshare.query.2=v 1.0 q link:http://www.yahoo.com/ callback processResults
# XXX since search returns false positives, study the query and change this % to match your confidence in results 
datasource.seomindshare.query.2.confidence=0.9
# XXX use xmpp for the default search term query, 
# Should probably have a query for each portal, we currently only support one query, easy to change later
datasource.seomindshare.query.3=v 1.0 q +"xmpp,jabber" callback processResults
# XXX since search returns false positives, study the query and change this % to match your confidence in results 
datasource.seomindshare.query.3.confidence=0.9
datasource.seomindshare.google.pagerank.api.root.uri=http://seopen.com/seopen-tools/pagerank.php
datasource.seomindshare.google.search.api.root.uri=http://ajax.googleapis.com/ajax/services/search/web
datasource.seomindshare.yahoo.api.root.uri=http://search.yahooapis.com/SiteExplorerService/V1/inlinkData
datasource.seomindshare.yahoo.bossapi.root.uri=http://boss.yahooapis.com/ysearch/web/v1/
datasource.seomindshare.yahoo.query.1=appid YOURBOSSAPPIDKEYHERE query http://www.xmpp.org results 2
datasource.seomindshare.yahoo.query.2a=xmpp
datasource.seomindshare.yahoo.query.2b=appid YOURBOSSAPPIDKEYHERE format xml
datasource.seomindshare.bing.api.root.uri=http://api.bing.net/json.aspx
datasource.seomindshare.bing.query.1=AppId YOURAPPIDHERE Version 2.2 Market en-US Query xmpp Sources web Web.Count 1 JsonType raw
datasource.seomindshare.alexa.api.root.uri=http://www.alexa.com/siteinfo/
datasource.seomindshare.alexa.query.1=www.xmpp.org

#
# Publisher
# 
# We are implementing the initial Publisher with a default to http://timetric.com
# 
# XXX: We only support one timetric app at the moment...is there a use case for needing more than one?
#
# Setup Steps
# ===========
# Note: You must setup your timetric service before using the publisher.  Sorry, you really do have to 
# read this instructions below.  If it is too much trouble, you may want to skip using it.
# XXX I may provide a working sample at some point.
# ===========
# 1. get an API Token from timetric (it's free)
# 2. Go onto timetric and upload your initial series data (XXX Is this ok...we could create programatically 
# but the advantages are unclear.  You still need to pull your series ID for each series, which we could do. 
# Maybe do this for V2.).  Note, the series ID is the last path on the URL to your data series.  These are unique.
# 3. For each series you upload, add the series ID to the series Dictionary below.  This may seem confusing, but I racked
# my brain for awhile on this (at least 10 minutes), and decided the easiest way would be to put the series into 
# the datasource class as part of the dictionary in get_datasource_metadata().  This is fine, but not really.  It
# is problematic to do the configuration inside of the source, especially if you are tracking changes to the project
# on github.com.  Instead of this, use the ordering defined in the implementation for each datasource inside of the
# get_datasource_metadata() method.  This gives you a definition of the expected order for each datasource field 
# we are planning to make into a data series.  This is still to complicated for my liking, but if you want it
# to work, this is what you have to do.  I would rather timetric allowed me to reference my data series by a 
# URI /USERID/SERIESID where the SERIESID is up to me.  I could then name the series using the plugin GUID + 
# field ID or field Name.  I may suggest this as an RFE to timetric.  
# 4. Run a periodic script to call sponge.tools.sponger.squeeze().  The frequency of this script should match
# the frequency <= frequency of data point samples.  So if you sample your data points every day, then you can 
# run daily or just weekly.  The frequency depends on how current you want your timetric data to be.
# 5. Go online to your timetric account and check your dashboard.  You should see your latest data series sets
# published per your last run of squeeze.
publisher.service.timetric.update.url=https://timetric.com/series
publisher.service.timetric.apitoken.key=YOURAPIKEY
publisher.service.timetric.apitoken.secret=YOURSECRET
#
# template
# publisher.service.timetric.series={'sponge.plugins.simplefreshmeat.FreshmeatDotNetDatasource':['votescore','popularity','vitality','subscribers'], 'sponge.plugins.simplegithub.GithubDatasource':['commitcount','watchercount','forkcount', 'collaborators','tagcount','branchcount','issuecount','lastcommit'], 'sponge.plugins.simpleseomindshare.SEOMindshareDatasource':['googlepagerank','googlebacklinks','googlesearchtermhits','yahooinlinks','yahoosearchtermhits','alexarank','alexainlinks','bingsearchtermhits']}
publisher.service.timetric.series={'sponge.plugins.simplefreshmeat.FreshmeatDotNetDatasource':['cT3n0jGFSYWwS5UQbXvlWw','bdb10YFeSA-rQkNEVD1rUA','jkcr87sbSCi6ljtPpqhreg','G0qd26SdR8CIr22DntLxZw'], 'sponge.plugins.simplegithub.GithubDatasource':['lWRq-BDnTpq2iP9ja3Zbzw','MozfM456RZSM0PHNmBIf7A','YdNlaiCsSuCbO92hmwtVqQ', 'NrH2tX3jSXeHPG2OttcPAQ','gKtHfKnMTLWaYgNJXG4Hlw','h2DgV8yBRbG2hWWCT7TGwA','O5jZFCtFSx-Yi_nO3yZofA','4lPgMjoxTpG8OJvK57Jz5A'], 'sponge.plugins.simpleseomindshare.SEOMindshareDatasource':['GUSnemsUQDi2pEpB7jWFxA','L2J3dcn_Sx6HcjznBAqcrw','QSzi4V2UTxycfgqB1Te59w','eR1VIXfhS3qE9U1gC-ftpA','Un-i7E6gRluHnuk7nAV9ng','_SitPRwYQWavwH-Al35ahg','ghIi75ItQV-rSmyZ4OQLPw','7p7k8ZqbTwGWeSjSE2NtDQ']}
ooglesearchtermhits','yahooinlinks','yahoosearchtermhits','alexarank','alexainlinks','bingsearchtermhits']}



#
# Backing Store
# XXX Need to impelement
backingstore.db.uri=XXX TODO Decide on default backing store, maybe a CSV
backingstore.backup.uri=XXX TODO Decide how to handle backup of your backing store, probably a timestamped copy

#
#  Report Setup
#  XXX Need to implement
report.output.text.file=spongesitereport.txt
report.output.stdout=TRUE